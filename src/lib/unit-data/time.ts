/**
 * Time Units
 * Comprehensive set of time measurement units
 */

import { UnitCategory, UnitCategoryId } from '../unit-types';

// Base category definition for time units
const timeCategory: UnitCategory = {
  id: UnitCategoryId.TIME,
  name: 'Time',
  icon: 'clock',
  description: 'Units for measuring time intervals',
  baseUnitId: 'second',
  
  // Commonly used units for quick access
  popularUnits: [
    'second',
    'minute',
    'hour',
    'day',
    'week',
    'year',
  ],
  
  // All time units in a single category
  units: [
    {
      id: 'second',
      name: 'Second',
      symbol: 's',
      pluralName: 'seconds',
      aliases: ['seconds', 'sec', 'secs'],
      baseUnit: true,
      toBase: value => value,
      fromBase: value => value,
      precision: 2,
    },
    {
      id: 'millisecond',
      name: 'Millisecond',
      symbol: 'ms',
      pluralName: 'milliseconds',
      aliases: ['milliseconds', 'msec', 'msecs'],
      conversionFactor: 0.001,
      toBase: value => value * 0.001,
      fromBase: value => value / 0.001,
      precision: 0,
    },
    {
      id: 'microsecond',
      name: 'Microsecond',
      symbol: 'μs',
      pluralName: 'microseconds',
      aliases: ['microseconds', 'usec', 'usecs'],
      conversionFactor: 0.000001,
      toBase: value => value * 0.000001,
      fromBase: value => value / 0.000001,
      precision: 0,
    },
    {
      id: 'nanosecond',
      name: 'Nanosecond',
      symbol: 'ns',
      pluralName: 'nanoseconds',
      aliases: ['nanoseconds', 'nsec', 'nsecs'],
      conversionFactor: 0.000000001,
      toBase: value => value * 0.000000001,
      fromBase: value => value / 0.000000001,
      precision: 0,
    },
    {
      id: 'minute',
      name: 'Minute',
      symbol: 'min',
      pluralName: 'minutes',
      aliases: ['minutes', 'mins'],
      conversionFactor: 60,
      toBase: value => value * 60,
      fromBase: value => value / 60,
      relatedUnits: ['second', 'hour'],
      precision: 2,
      formatter: value => {
        // Special formatter for time units with colons
        return value.toFixed(2);
      },
    },
    {
      id: 'hour',
      name: 'Hour',
      symbol: 'h',
      pluralName: 'hours',
      aliases: ['hours', 'hr', 'hrs'],
      conversionFactor: 3600,
      toBase: value => value * 3600,
      fromBase: value => value / 3600,
      relatedUnits: ['minute', 'day'],
      precision: 2,
    },
    {
      id: 'day',
      name: 'Day',
      symbol: 'd',
      pluralName: 'days',
      aliases: ['days'],
      conversionFactor: 86400,
      toBase: value => value * 86400,
      fromBase: value => value / 86400,
      relatedUnits: ['hour', 'week'],
      precision: 2,
    },
    {
      id: 'week',
      name: 'Week',
      symbol: 'wk',
      pluralName: 'weeks',
      aliases: ['weeks'],
      conversionFactor: 604800,
      toBase: value => value * 604800,
      fromBase: value => value / 604800,
      relatedUnits: ['day', 'month'],
      precision: 2,
    },
    {
      id: 'month',
      name: 'Month',
      symbol: 'mo',
      pluralName: 'months',
      aliases: ['months'],
      // Average month length
      conversionFactor: 2629746,
      toBase: value => value * 2629746,
      fromBase: value => value / 2629746,
      relatedUnits: ['week', 'year'],
      precision: 2,
    },
    {
      id: 'year',
      name: 'Year',
      symbol: 'yr',
      pluralName: 'years',
      aliases: ['years'],
      // Average Gregorian year
      conversionFactor: 31556952,
      toBase: value => value * 31556952,
      fromBase: value => value / 31556952,
      relatedUnits: ['month', 'decade'],
      precision: 2,
    },
    {
      id: 'decade',
      name: 'Decade',
      symbol: 'decade',
      pluralName: 'decades',
      aliases: ['decades'],
      conversionFactor: 315569520,
      toBase: value => value * 315569520,
      fromBase: value => value / 315569520,
      relatedUnits: ['year', 'century'],
      precision: 2,
    },
    {
      id: 'century',
      name: 'Century',
      symbol: 'century',
      pluralName: 'centuries',
      aliases: ['centuries'],
      conversionFactor: 3155695200,
      toBase: value => value * 3155695200,
      fromBase: value => value / 3155695200,
      relatedUnits: ['decade', 'millennium'],
      precision: 2,
    },
    {
      id: 'millennium',
      name: 'Millennium',
      symbol: 'millennium',
      pluralName: 'millennia',
      aliases: ['millennia', 'millenniums'],
      conversionFactor: 31556952000,
      toBase: value => value * 31556952000,
      fromBase: value => value / 31556952000,
      relatedUnits: ['century'],
      precision: 3,
    },
    {
      id: 'fortnight',
      name: 'Fortnight',
      symbol: 'fortnight',
      pluralName: 'fortnights',
      aliases: ['fortnights'],
      conversionFactor: 1209600,
      toBase: value => value * 1209600,
      fromBase: value => value / 1209600,
      precision: 2,
    },
    {
      id: 'quarter',
      name: 'Quarter',
      symbol: 'qtr',
      pluralName: 'quarters',
      aliases: ['quarters', 'fiscal quarter'],
      // Exactly 3 months
      conversionFactor: 7889238,
      toBase: value => value * 7889238,
      fromBase: value => value / 7889238,
      relatedUnits: ['month', 'year'],
      precision: 2,
    },
    {
      id: 'jiffy',
      name: 'Jiffy',
      symbol: 'jiffy',
      pluralName: 'jiffies',
      aliases: ['jiffies'],
      // Computer jiffy (1/100 of a second in many systems)
      conversionFactor: 0.01,
      toBase: value => value * 0.01,
      fromBase: value => value / 0.01,
      precision: 0,
    },
    {
      id: 'planck_time',
      name: 'Planck Time',
      symbol: 'tₚ',
      pluralName: 'planck times',
      aliases: ['planck time'],
      // The smallest possible unit of time
      conversionFactor: 5.39e-44,
      toBase: value => value * 5.39e-44,
      fromBase: value => value / 5.39e-44,
      precision: 6,
    },
    {
      id: 'shake',
      name: 'Shake',
      symbol: 'shake',
      pluralName: 'shakes',
      aliases: ['shakes'],
      // Used in nuclear physics
      conversionFactor: 1e-8,
      toBase: value => value * 1e-8,
      fromBase: value => value / 1e-8,
      precision: 2,
    },
    {
      id: 'leap_year',
      name: 'Leap Year',
      symbol: 'leap yr',
      pluralName: 'leap years',
      aliases: ['leap years'],
      // Exactly 366 days
      conversionFactor: 31622400,
      toBase: value => value * 31622400,
      fromBase: value => value / 31622400,
      relatedUnits: ['year'],
      precision: 2,
    },
    {
      id: 'moment',
      name: 'Moment',
      symbol: 'moment',
      pluralName: 'moments',
      aliases: ['moments', 'medieval moment'],
      // Medieval unit of time, about 90 seconds
      conversionFactor: 90,
      toBase: value => value * 90,
      fromBase: value => value / 90,
      precision: 1,
    }
  ]
};

export default timeCategory; 