/**
 * Length Units
 * Comprehensive set of length/distance measurement units
 */

import { UnitCategory, UnitCategoryId } from '../unit-types';

// Base category definition for length units
const lengthCategory: UnitCategory = {
  id: UnitCategoryId.LENGTH,
  name: 'Length',
  icon: 'ruler',
  description: 'Units for measuring distance, length or height',
  baseUnitId: 'meter',
  
  // Commonly used units for quick access
  popularUnits: [
    'meter',
    'centimeter',
    'kilometer',
    'inch',
    'foot',
    'mile',
  ],
  
  // Organized into subcategories for better navigation
  subcategories: [
    {
      id: 'metric',
      name: 'Metric',
      description: 'International System of Units (SI)',
      units: [
        {
          id: 'meter',
          name: 'Meter',
          symbol: 'm',
          pluralName: 'meters',
          aliases: ['metre', 'metres', 'meters'],
          baseUnit: true,
          toBase: value => value,
          fromBase: value => value,
          precision: 3,
        },
        {
          id: 'kilometer',
          name: 'Kilometer',
          symbol: 'km',
          pluralName: 'kilometers',
          aliases: ['kilometre', 'kilometres', 'kilometers'],
          conversionFactor: 1000,
          toBase: value => value * 1000,
          fromBase: value => value / 1000,
          precision: 3,
        },
        {
          id: 'decimeter',
          name: 'Decimeter',
          symbol: 'dm',
          pluralName: 'decimeters',
          aliases: ['decimetre', 'decimetres', 'decimeters'],
          conversionFactor: 0.1,
          toBase: value => value * 0.1,
          fromBase: value => value / 0.1,
          precision: 3,
        },
        {
          id: 'centimeter',
          name: 'Centimeter',
          symbol: 'cm',
          pluralName: 'centimeters',
          aliases: ['centimetre', 'centimetres', 'centimeters'],
          conversionFactor: 0.01,
          toBase: value => value * 0.01,
          fromBase: value => value / 0.01,
          precision: 2,
        },
        {
          id: 'millimeter',
          name: 'Millimeter',
          symbol: 'mm',
          pluralName: 'millimeters',
          aliases: ['millimetre', 'millimetres', 'millimeters'],
          conversionFactor: 0.001,
          toBase: value => value * 0.001,
          fromBase: value => value / 0.001,
          precision: 1,
        },
        {
          id: 'micrometer',
          name: 'Micrometer',
          symbol: 'Î¼m',
          pluralName: 'micrometers',
          aliases: ['micrometre', 'micrometres', 'micrometers', 'micron', 'microns'],
          conversionFactor: 0.000001,
          toBase: value => value * 0.000001,
          fromBase: value => value / 0.000001,
          precision: 2,
        },
        {
          id: 'nanometer',
          name: 'Nanometer',
          symbol: 'nm',
          pluralName: 'nanometers',
          aliases: ['nanometre', 'nanometres', 'nanometers'],
          conversionFactor: 0.000000001,
          toBase: value => value * 0.000000001,
          fromBase: value => value / 0.000000001,
          precision: 2,
        },
        {
          id: 'picometer',
          name: 'Picometer',
          symbol: 'pm',
          pluralName: 'picometers',
          aliases: ['picometre', 'picometres', 'picometers'],
          conversionFactor: 0.000000000001,
          toBase: value => value * 0.000000000001,
          fromBase: value => value / 0.000000000001,
          precision: 2,
        },
      ],
      popularUnits: ['meter', 'centimeter', 'kilometer', 'millimeter'],
    },
    {
      id: 'imperial',
      name: 'Imperial & US',
      description: 'US and UK measurement systems',
      units: [
        {
          id: 'inch',
          name: 'Inch',
          symbol: 'in',
          pluralName: 'inches',
          aliases: ['inches', 'in.'],
          conversionFactor: 0.0254,
          toBase: value => value * 0.0254,
          fromBase: value => value / 0.0254,
          relatedUnits: ['centimeter', 'foot'],
          precision: 2,
        },
        {
          id: 'foot',
          name: 'Foot',
          symbol: 'ft',
          pluralName: 'feet',
          aliases: ['feet', 'ft.'],
          conversionFactor: 0.3048,
          toBase: value => value * 0.3048,
          fromBase: value => value / 0.3048,
          relatedUnits: ['inch', 'yard', 'meter'],
          precision: 2,
        },
        {
          id: 'yard',
          name: 'Yard',
          symbol: 'yd',
          pluralName: 'yards',
          aliases: ['yards', 'yd.'],
          conversionFactor: 0.9144,
          toBase: value => value * 0.9144,
          fromBase: value => value / 0.9144,
          relatedUnits: ['foot', 'meter'],
          precision: 2,
        },
        {
          id: 'mile',
          name: 'Mile',
          symbol: 'mi',
          pluralName: 'miles',
          aliases: ['miles', 'mi.', 'statute mile', 'statute miles'],
          conversionFactor: 1609.344,
          toBase: value => value * 1609.344,
          fromBase: value => value / 1609.344,
          relatedUnits: ['kilometer', 'nautical_mile'],
          precision: 3,
        },
        {
          id: 'thou',
          name: 'Thou',
          symbol: 'thou',
          pluralName: 'thou',
          aliases: ['mil', 'mils', 'thousandth', 'thousandths', 'thou'],
          conversionFactor: 0.0000254,
          toBase: value => value * 0.0000254,
          fromBase: value => value / 0.0000254,
          precision: 1,
        },
        {
          id: 'hand',
          name: 'Hand',
          symbol: 'h',
          pluralName: 'hands',
          aliases: ['hands'],
          conversionFactor: 0.1016,
          toBase: value => value * 0.1016,
          fromBase: value => value / 0.1016,
          precision: 1,
        },
        {
          id: 'furlong',
          name: 'Furlong',
          symbol: 'fur',
          pluralName: 'furlongs',
          aliases: ['furlongs'],
          conversionFactor: 201.168,
          toBase: value => value * 201.168,
          fromBase: value => value / 201.168,
          precision: 3,
        },
      ],
      popularUnits: ['inch', 'foot', 'yard', 'mile'],
    },
    {
      id: 'maritime',
      name: 'Maritime',
      description: 'Nautical distance measurements',
      units: [
        {
          id: 'nautical_mile',
          name: 'Nautical Mile',
          symbol: 'nmi',
          pluralName: 'nautical miles',
          aliases: ['nautical miles', 'NM', 'nm'],
          conversionFactor: 1852,
          toBase: value => value * 1852,
          fromBase: value => value / 1852,
          relatedUnits: ['mile', 'kilometer'],
          precision: 3,
        },
        {
          id: 'fathom',
          name: 'Fathom',
          symbol: 'ftm',
          pluralName: 'fathoms',
          aliases: ['fathoms'],
          conversionFactor: 1.8288,
          toBase: value => value * 1.8288,
          fromBase: value => value / 1.8288,
          precision: 2,
        },
        {
          id: 'cable',
          name: 'Cable',
          symbol: 'cb',
          pluralName: 'cables',
          aliases: ['cables', 'cable length', 'cable lengths'],
          conversionFactor: 185.2,
          toBase: value => value * 185.2,
          fromBase: value => value / 185.2,
          precision: 1,
        }
      ],
      popularUnits: ['nautical_mile', 'fathom'],
    },
    {
      id: 'astronomy',
      name: 'Astronomy',
      description: 'Units for astronomical distances',
      units: [
        {
          id: 'astronomical_unit',
          name: 'Astronomical Unit',
          symbol: 'AU',
          pluralName: 'astronomical units',
          aliases: ['AU', 'astronomical units', 'au'],
          conversionFactor: 1.495978707e11,
          toBase: value => value * 1.495978707e11,
          fromBase: value => value / 1.495978707e11,
          precision: 6,
        },
        {
          id: 'light_year',
          name: 'Light Year',
          symbol: 'ly',
          pluralName: 'light years',
          aliases: ['light years', 'lightyear', 'lightyears'],
          conversionFactor: 9.4607304725808e15,
          toBase: value => value * 9.4607304725808e15,
          fromBase: value => value / 9.4607304725808e15,
          precision: 6,
        },
        {
          id: 'parsec',
          name: 'Parsec',
          symbol: 'pc',
          pluralName: 'parsecs',
          aliases: ['parsecs'],
          conversionFactor: 3.0856775814671916e16,
          toBase: value => value * 3.0856775814671916e16,
          fromBase: value => value / 3.0856775814671916e16,
          precision: 6,
        }
      ],
      popularUnits: ['astronomical_unit', 'light_year', 'parsec'],
    },
    {
      id: 'typographic',
      name: 'Typography',
      description: 'Units used in typography and printing',
      units: [
        {
          id: 'point',
          name: 'Point',
          symbol: 'pt',
          pluralName: 'points',
          aliases: ['points', 'pt', 'pts'],
          conversionFactor: 0.000352778,
          toBase: value => value * 0.000352778,
          fromBase: value => value / 0.000352778,
          precision: 1,
        },
        {
          id: 'pica',
          name: 'Pica',
          symbol: 'pc',
          pluralName: 'picas',
          aliases: ['picas'],
          conversionFactor: 0.00423333,
          toBase: value => value * 0.00423333,
          fromBase: value => value / 0.00423333,
          precision: 2,
        }
      ],
      popularUnits: ['point', 'pica'],
    },
    {
      id: 'historical',
      name: 'Historical',
      description: 'Historical units of measurement',
      units: [
        {
          id: 'cubit',
          name: 'Cubit',
          symbol: 'cubit',
          pluralName: 'cubits',
          aliases: ['cubits'],
          conversionFactor: 0.45,  // Approximate average
          toBase: value => value * 0.45,
          fromBase: value => value / 0.45,
          precision: 2,
        },
        {
          id: 'angstrom',
          name: 'ÃngstrÃ¶m',
          symbol: 'Ã',
          pluralName: 'Ã¥ngstrÃ¶ms',
          aliases: ['angstrom', 'angstroms', 'Ã¥ngstrÃ¶m', 'Ã¥ngstrÃ¶ms'],
          conversionFactor: 1e-10,
          toBase: value => value * 1e-10,
          fromBase: value => value / 1e-10,
          precision: 2,
        }
      ],
      popularUnits: ['cubit', 'angstrom'],
    }
  ]
};

export default lengthCategory; 